// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inference_inference_Pipeline_VITIS_LOOP_22_1_VITIS_LOOP_23_2_VITIS_LOOP_25_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_dout,
        input_r_empty_n,
        input_r_read,
        conv_output_din,
        conv_output_full_n,
        conv_output_write,
        conv_weights_0_address0,
        conv_weights_0_ce0,
        conv_weights_0_q0,
        conv_weights_1_address0,
        conv_weights_1_ce0,
        conv_weights_1_q0,
        conv_weights_2_address0,
        conv_weights_2_ce0,
        conv_weights_2_q0,
        conv_weights_3_address0,
        conv_weights_3_ce0,
        conv_weights_3_q0,
        conv_weights_4_address0,
        conv_weights_4_ce0,
        conv_weights_4_q0,
        conv_weights_5_address0,
        conv_weights_5_ce0,
        conv_weights_5_q0,
        conv_weights_6_address0,
        conv_weights_6_ce0,
        conv_weights_6_q0,
        conv_weights_7_address0,
        conv_weights_7_ce0,
        conv_weights_7_q0,
        conv_weights_8_address0,
        conv_weights_8_ce0,
        conv_weights_8_q0,
        conv_weights_9_address0,
        conv_weights_9_ce0,
        conv_weights_9_q0,
        conv_weights_10_address0,
        conv_weights_10_ce0,
        conv_weights_10_q0,
        conv_weights_11_address0,
        conv_weights_11_ce0,
        conv_weights_11_q0,
        conv_weights_12_address0,
        conv_weights_12_ce0,
        conv_weights_12_q0,
        conv_weights_13_address0,
        conv_weights_13_ce0,
        conv_weights_13_q0,
        conv_weights_14_address0,
        conv_weights_14_ce0,
        conv_weights_14_q0,
        conv_weights_15_address0,
        conv_weights_15_ce0,
        conv_weights_15_q0,
        conv_biases_0_load,
        conv_biases_1_load,
        conv_biases_2_load,
        conv_biases_3_load,
        conv_biases_4_load,
        conv_biases_5_load,
        conv_biases_6_load,
        conv_biases_7_load,
        conv_biases_8_load,
        conv_biases_9_load,
        conv_biases_10_load,
        conv_biases_11_load,
        conv_biases_12_load,
        conv_biases_13_load,
        conv_biases_14_load,
        conv_biases_15_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_r_dout;
input   input_r_empty_n;
output   input_r_read;
output  [15:0] conv_output_din;
input   conv_output_full_n;
output   conv_output_write;
output  [6:0] conv_weights_0_address0;
output   conv_weights_0_ce0;
input  [31:0] conv_weights_0_q0;
output  [6:0] conv_weights_1_address0;
output   conv_weights_1_ce0;
input  [31:0] conv_weights_1_q0;
output  [6:0] conv_weights_2_address0;
output   conv_weights_2_ce0;
input  [31:0] conv_weights_2_q0;
output  [6:0] conv_weights_3_address0;
output   conv_weights_3_ce0;
input  [31:0] conv_weights_3_q0;
output  [6:0] conv_weights_4_address0;
output   conv_weights_4_ce0;
input  [31:0] conv_weights_4_q0;
output  [6:0] conv_weights_5_address0;
output   conv_weights_5_ce0;
input  [31:0] conv_weights_5_q0;
output  [6:0] conv_weights_6_address0;
output   conv_weights_6_ce0;
input  [31:0] conv_weights_6_q0;
output  [6:0] conv_weights_7_address0;
output   conv_weights_7_ce0;
input  [31:0] conv_weights_7_q0;
output  [6:0] conv_weights_8_address0;
output   conv_weights_8_ce0;
input  [31:0] conv_weights_8_q0;
output  [6:0] conv_weights_9_address0;
output   conv_weights_9_ce0;
input  [31:0] conv_weights_9_q0;
output  [6:0] conv_weights_10_address0;
output   conv_weights_10_ce0;
input  [31:0] conv_weights_10_q0;
output  [6:0] conv_weights_11_address0;
output   conv_weights_11_ce0;
input  [31:0] conv_weights_11_q0;
output  [6:0] conv_weights_12_address0;
output   conv_weights_12_ce0;
input  [31:0] conv_weights_12_q0;
output  [6:0] conv_weights_13_address0;
output   conv_weights_13_ce0;
input  [31:0] conv_weights_13_q0;
output  [6:0] conv_weights_14_address0;
output   conv_weights_14_ce0;
input  [31:0] conv_weights_14_q0;
output  [6:0] conv_weights_15_address0;
output   conv_weights_15_ce0;
input  [31:0] conv_weights_15_q0;
input  [31:0] conv_biases_0_load;
input  [31:0] conv_biases_1_load;
input  [31:0] conv_biases_2_load;
input  [31:0] conv_biases_3_load;
input  [31:0] conv_biases_4_load;
input  [31:0] conv_biases_5_load;
input  [31:0] conv_biases_6_load;
input  [31:0] conv_biases_7_load;
input  [31:0] conv_biases_8_load;
input  [31:0] conv_biases_9_load;
input  [31:0] conv_biases_10_load;
input  [31:0] conv_biases_11_load;
input  [31:0] conv_biases_12_load;
input  [31:0] conv_biases_13_load;
input  [31:0] conv_biases_14_load;
input  [31:0] conv_biases_15_load;

reg ap_idle;
reg input_r_read;
reg conv_output_write;
reg conv_weights_0_ce0;
reg conv_weights_1_ce0;
reg conv_weights_2_ce0;
reg conv_weights_3_ce0;
reg conv_weights_4_ce0;
reg conv_weights_5_ce0;
reg conv_weights_6_ce0;
reg conv_weights_7_ce0;
reg conv_weights_8_ce0;
reg conv_weights_9_ce0;
reg conv_weights_10_ce0;
reg conv_weights_11_ce0;
reg conv_weights_12_ce0;
reg conv_weights_13_ce0;
reg conv_weights_14_ce0;
reg conv_weights_15_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln27_reg_957;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] ifzero_reg_1041;
reg   [0:0] ifzero_reg_1041_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_512_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_r_blk_n;
wire    ap_block_pp0_stage0;
reg    conv_output_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln23_fu_588_p2;
reg   [0:0] or_ln23_reg_947;
wire   [4:0] select_ln23_2_fu_602_p3;
reg   [4:0] select_ln23_2_reg_952;
wire   [0:0] icmp_ln27_fu_646_p2;
wire   [0:0] ifzero_fu_658_p2;
wire   [15:0] trunc_ln33_1_fu_686_p1;
reg   [15:0] trunc_ln33_1_reg_1045;
reg   [15:0] trunc_ln33_1_reg_1045_pp0_iter2_reg;
wire   [63:0] j_cast_fu_610_p1;
reg   [31:0] sum_fu_138;
wire   [31:0] select_ln23_1_fu_735_p3;
wire   [31:0] sum_2_fu_794_p2;
wire    ap_loop_init;
reg   [7:0] j_fu_142;
wire   [7:0] add_ln25_fu_652_p2;
reg   [4:0] k_fu_146;
reg   [12:0] indvar_flatten_fu_150;
wire   [12:0] select_ln23_3_fu_699_p3;
reg   [15:0] i_fu_154;
wire   [15:0] select_ln22_1_fu_574_p3;
reg   [25:0] indvar_flatten12_fu_158;
wire   [25:0] add_ln22_fu_518_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln23_fu_536_p2;
wire   [0:0] icmp_ln25_fu_556_p2;
wire   [0:0] xor_ln22_fu_550_p2;
wire   [15:0] add_ln22_1_fu_568_p2;
wire   [4:0] select_ln22_fu_542_p3;
wire   [0:0] and_ln22_fu_562_p2;
wire   [4:0] add_ln23_fu_582_p2;
wire   [7:0] select_ln23_fu_594_p3;
wire   [7:0] shl_ln26_fu_630_p2;
wire   [15:0] zext_ln27_fu_636_p1;
wire   [15:0] add_ln27_fu_640_p2;
wire   [4:0] tmp_fu_664_p17;
wire   [31:0] tmp_fu_664_p18;
wire   [12:0] add_ln23_1_fu_693_p2;
wire  signed [31:0] i_op_assign_fu_747_p18;
wire   [31:0] mul_ln28_fu_788_p2;
wire   [15:0] trunc_ln33_fu_808_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

inference_mux_165_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mux_165_32_1_1_U1(
    .din0(conv_biases_0_load),
    .din1(conv_biases_1_load),
    .din2(conv_biases_2_load),
    .din3(conv_biases_3_load),
    .din4(conv_biases_4_load),
    .din5(conv_biases_5_load),
    .din6(conv_biases_6_load),
    .din7(conv_biases_7_load),
    .din8(conv_biases_8_load),
    .din9(conv_biases_9_load),
    .din10(conv_biases_10_load),
    .din11(conv_biases_11_load),
    .din12(conv_biases_12_load),
    .din13(conv_biases_13_load),
    .din14(conv_biases_14_load),
    .din15(conv_biases_15_load),
    .din16(tmp_fu_664_p17),
    .dout(tmp_fu_664_p18)
);

inference_mux_165_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mux_165_32_1_1_U2(
    .din0(conv_weights_0_q0),
    .din1(conv_weights_1_q0),
    .din2(conv_weights_2_q0),
    .din3(conv_weights_3_q0),
    .din4(conv_weights_4_q0),
    .din5(conv_weights_5_q0),
    .din6(conv_weights_6_q0),
    .din7(conv_weights_7_q0),
    .din8(conv_weights_8_q0),
    .din9(conv_weights_9_q0),
    .din10(conv_weights_10_q0),
    .din11(conv_weights_11_q0),
    .din12(conv_weights_12_q0),
    .din13(conv_weights_13_q0),
    .din14(conv_weights_14_q0),
    .din15(conv_weights_15_q0),
    .din16(select_ln23_2_reg_952),
    .dout(i_op_assign_fu_747_p18)
);

inference_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U3(
    .din0(i_op_assign_fu_747_p18),
    .din1(input_r_dout),
    .dout(mul_ln28_fu_788_p2)
);

inference_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_154 <= 16'd0;
        end else if (((icmp_ln22_fu_512_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_154 <= select_ln22_1_fu_574_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_158 <= 26'd0;
        end else if (((icmp_ln22_fu_512_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten12_fu_158 <= add_ln22_fu_518_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_150 <= 13'd0;
        end else if (((icmp_ln22_fu_512_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_150 <= select_ln23_3_fu_699_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_142 <= 8'd0;
        end else if (((icmp_ln22_fu_512_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_142 <= add_ln25_fu_652_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_146 <= 5'd0;
        end else if (((icmp_ln22_fu_512_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_146 <= select_ln23_2_fu_602_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_fu_138 <= 32'd0;
        end else if (((icmp_ln27_reg_957 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            sum_fu_138 <= sum_2_fu_794_p2;
        end else if (((icmp_ln27_reg_957 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            sum_fu_138 <= select_ln23_1_fu_735_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_512_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln27_reg_957 <= icmp_ln27_fu_646_p2;
        ifzero_reg_1041 <= ifzero_fu_658_p2;
        or_ln23_reg_947 <= or_ln23_fu_588_p2;
        select_ln23_2_reg_952 <= select_ln23_2_fu_602_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ifzero_reg_1041_pp0_iter2_reg <= ifzero_reg_1041;
        trunc_ln33_1_reg_1045_pp0_iter2_reg <= trunc_ln33_1_reg_1045;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_512_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ifzero_fu_658_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln33_1_reg_1045 <= trunc_ln33_1_fu_686_p1;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_512_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ifzero_reg_1041_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        conv_output_blk_n = conv_output_full_n;
    end else begin
        conv_output_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ifzero_reg_1041_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        conv_output_write = 1'b1;
    end else begin
        conv_output_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_10_ce0 = 1'b1;
    end else begin
        conv_weights_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_11_ce0 = 1'b1;
    end else begin
        conv_weights_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_12_ce0 = 1'b1;
    end else begin
        conv_weights_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_13_ce0 = 1'b1;
    end else begin
        conv_weights_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_14_ce0 = 1'b1;
    end else begin
        conv_weights_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_15_ce0 = 1'b1;
    end else begin
        conv_weights_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_3_ce0 = 1'b1;
    end else begin
        conv_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_4_ce0 = 1'b1;
    end else begin
        conv_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_5_ce0 = 1'b1;
    end else begin
        conv_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_6_ce0 = 1'b1;
    end else begin
        conv_weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_7_ce0 = 1'b1;
    end else begin
        conv_weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_8_ce0 = 1'b1;
    end else begin
        conv_weights_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_weights_9_ce0 = 1'b1;
    end else begin
        conv_weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln27_reg_957 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln27_reg_957 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        input_r_blk_n = input_r_empty_n;
    end else begin
        input_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_957 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_957 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        input_r_read = 1'b1;
    end else begin
        input_r_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_1_fu_568_p2 = (i_fu_154 + 16'd2);

assign add_ln22_fu_518_p2 = (indvar_flatten12_fu_158 + 26'd1);

assign add_ln23_1_fu_693_p2 = (indvar_flatten_fu_150 + 13'd1);

assign add_ln23_fu_582_p2 = (select_ln22_fu_542_p3 + 5'd1);

assign add_ln25_fu_652_p2 = (select_ln23_fu_594_p3 + 8'd1);

assign add_ln27_fu_640_p2 = (zext_ln27_fu_636_p1 + select_ln22_1_fu_574_p3);

assign and_ln22_fu_562_p2 = (xor_ln22_fu_550_p2 & icmp_ln25_fu_556_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ifzero_reg_1041_pp0_iter2_reg == 1'd1) & (conv_output_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln27_reg_957 == 1'd1) & (input_r_empty_n == 1'b0)) | ((icmp_ln27_reg_957 == 1'd0) & (input_r_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ifzero_reg_1041_pp0_iter2_reg == 1'd1) & (conv_output_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln27_reg_957 == 1'd1) & (input_r_empty_n == 1'b0)) | ((icmp_ln27_reg_957 == 1'd0) & (input_r_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ifzero_reg_1041_pp0_iter2_reg == 1'd1) & (conv_output_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln27_reg_957 == 1'd1) & (input_r_empty_n == 1'b0)) | ((icmp_ln27_reg_957 == 1'd0) & (input_r_empty_n == 1'b0)))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((icmp_ln27_reg_957 == 1'd1) & (input_r_empty_n == 1'b0)) | ((icmp_ln27_reg_957 == 1'd0) & (input_r_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((ifzero_reg_1041_pp0_iter2_reg == 1'd1) & (conv_output_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign conv_output_din = (trunc_ln33_1_reg_1045_pp0_iter2_reg + trunc_ln33_fu_808_p1);

assign conv_weights_0_address0 = j_cast_fu_610_p1;

assign conv_weights_10_address0 = j_cast_fu_610_p1;

assign conv_weights_11_address0 = j_cast_fu_610_p1;

assign conv_weights_12_address0 = j_cast_fu_610_p1;

assign conv_weights_13_address0 = j_cast_fu_610_p1;

assign conv_weights_14_address0 = j_cast_fu_610_p1;

assign conv_weights_15_address0 = j_cast_fu_610_p1;

assign conv_weights_1_address0 = j_cast_fu_610_p1;

assign conv_weights_2_address0 = j_cast_fu_610_p1;

assign conv_weights_3_address0 = j_cast_fu_610_p1;

assign conv_weights_4_address0 = j_cast_fu_610_p1;

assign conv_weights_5_address0 = j_cast_fu_610_p1;

assign conv_weights_6_address0 = j_cast_fu_610_p1;

assign conv_weights_7_address0 = j_cast_fu_610_p1;

assign conv_weights_8_address0 = j_cast_fu_610_p1;

assign conv_weights_9_address0 = j_cast_fu_610_p1;

assign icmp_ln22_fu_512_p2 = ((indvar_flatten12_fu_158 == 26'd35840000) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_536_p2 = ((indvar_flatten_fu_150 == 13'd2048) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_556_p2 = ((j_fu_142 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_646_p2 = ((add_ln27_fu_640_p2 < 16'd35000) ? 1'b1 : 1'b0);

assign ifzero_fu_658_p2 = ((add_ln25_fu_652_p2 == 8'd128) ? 1'b1 : 1'b0);

assign j_cast_fu_610_p1 = select_ln23_fu_594_p3;

assign or_ln23_fu_588_p2 = (icmp_ln23_fu_536_p2 | and_ln22_fu_562_p2);

assign select_ln22_1_fu_574_p3 = ((icmp_ln23_fu_536_p2[0:0] == 1'b1) ? add_ln22_1_fu_568_p2 : i_fu_154);

assign select_ln22_fu_542_p3 = ((icmp_ln23_fu_536_p2[0:0] == 1'b1) ? 5'd0 : k_fu_146);

assign select_ln23_1_fu_735_p3 = ((or_ln23_reg_947[0:0] == 1'b1) ? 32'd0 : sum_fu_138);

assign select_ln23_2_fu_602_p3 = ((and_ln22_fu_562_p2[0:0] == 1'b1) ? add_ln23_fu_582_p2 : select_ln22_fu_542_p3);

assign select_ln23_3_fu_699_p3 = ((icmp_ln23_fu_536_p2[0:0] == 1'b1) ? 13'd1 : add_ln23_1_fu_693_p2);

assign select_ln23_fu_594_p3 = ((or_ln23_fu_588_p2[0:0] == 1'b1) ? 8'd0 : j_fu_142);

assign shl_ln26_fu_630_p2 = select_ln23_fu_594_p3 << 8'd1;

assign sum_2_fu_794_p2 = (mul_ln28_fu_788_p2 + select_ln23_1_fu_735_p3);

assign tmp_fu_664_p17 = ((and_ln22_fu_562_p2[0:0] == 1'b1) ? add_ln23_fu_582_p2 : select_ln22_fu_542_p3);

assign trunc_ln33_1_fu_686_p1 = tmp_fu_664_p18[15:0];

assign trunc_ln33_fu_808_p1 = sum_fu_138[15:0];

assign xor_ln22_fu_550_p2 = (icmp_ln23_fu_536_p2 ^ 1'd1);

assign zext_ln27_fu_636_p1 = shl_ln26_fu_630_p2;

endmodule //inference_inference_Pipeline_VITIS_LOOP_22_1_VITIS_LOOP_23_2_VITIS_LOOP_25_3

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_inference_Pipeline_VITIS_LOOP_22_1_VITIS_LOOP_23_2_VITIS_LOOP_25_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_empty_n : IN STD_LOGIC;
    input_r_read : OUT STD_LOGIC;
    conv_output_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_output_full_n : IN STD_LOGIC;
    conv_output_write : OUT STD_LOGIC;
    conv_weights_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_0_ce0 : OUT STD_LOGIC;
    conv_weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_1_ce0 : OUT STD_LOGIC;
    conv_weights_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_2_ce0 : OUT STD_LOGIC;
    conv_weights_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_3_ce0 : OUT STD_LOGIC;
    conv_weights_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_4_ce0 : OUT STD_LOGIC;
    conv_weights_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_5_ce0 : OUT STD_LOGIC;
    conv_weights_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_6_ce0 : OUT STD_LOGIC;
    conv_weights_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_7_ce0 : OUT STD_LOGIC;
    conv_weights_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_8_ce0 : OUT STD_LOGIC;
    conv_weights_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_9_ce0 : OUT STD_LOGIC;
    conv_weights_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_10_ce0 : OUT STD_LOGIC;
    conv_weights_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_11_ce0 : OUT STD_LOGIC;
    conv_weights_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_12_ce0 : OUT STD_LOGIC;
    conv_weights_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_13_ce0 : OUT STD_LOGIC;
    conv_weights_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_14_ce0 : OUT STD_LOGIC;
    conv_weights_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_weights_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_weights_15_ce0 : OUT STD_LOGIC;
    conv_weights_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_8_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_9_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_11_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_12_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_13_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_14_load : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_biases_15_load : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inference_inference_Pipeline_VITIS_LOOP_22_1_VITIS_LOOP_23_2_VITIS_LOOP_25_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv26_222E000 : STD_LOGIC_VECTOR (25 downto 0) := "10001000101110000000000000";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_88B8 : STD_LOGIC_VECTOR (15 downto 0) := "1000100010111000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln27_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ifzero_reg_1041 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_1041_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln22_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal input_r_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal conv_output_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln23_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_2_fu_602_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_2_reg_952 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln27_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln33_1_fu_686_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_1_reg_1045 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_1_reg_1045_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal j_cast_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln23_1_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln25_fu_652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_fu_146 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_150 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln23_3_fu_699_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_fu_154 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln22_1_fu_574_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten12_fu_158 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln22_fu_518_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln23_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln22_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_1_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln22_fu_542_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln22_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_582_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_fu_594_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln26_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_fu_636_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln27_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_664_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_664_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_1_fu_693_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_op_assign_fu_747_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln33_fu_808_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component inference_mux_165_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_mul_32s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_165_32_1_1_U1 : component inference_mux_165_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => conv_biases_0_load,
        din1 => conv_biases_1_load,
        din2 => conv_biases_2_load,
        din3 => conv_biases_3_load,
        din4 => conv_biases_4_load,
        din5 => conv_biases_5_load,
        din6 => conv_biases_6_load,
        din7 => conv_biases_7_load,
        din8 => conv_biases_8_load,
        din9 => conv_biases_9_load,
        din10 => conv_biases_10_load,
        din11 => conv_biases_11_load,
        din12 => conv_biases_12_load,
        din13 => conv_biases_13_load,
        din14 => conv_biases_14_load,
        din15 => conv_biases_15_load,
        din16 => tmp_fu_664_p17,
        dout => tmp_fu_664_p18);

    mux_165_32_1_1_U2 : component inference_mux_165_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => conv_weights_0_q0,
        din1 => conv_weights_1_q0,
        din2 => conv_weights_2_q0,
        din3 => conv_weights_3_q0,
        din4 => conv_weights_4_q0,
        din5 => conv_weights_5_q0,
        din6 => conv_weights_6_q0,
        din7 => conv_weights_7_q0,
        din8 => conv_weights_8_q0,
        din9 => conv_weights_9_q0,
        din10 => conv_weights_10_q0,
        din11 => conv_weights_11_q0,
        din12 => conv_weights_12_q0,
        din13 => conv_weights_13_q0,
        din14 => conv_weights_14_q0,
        din15 => conv_weights_15_q0,
        din16 => select_ln23_2_reg_952,
        dout => i_op_assign_fu_747_p18);

    mul_32s_16s_32_1_1_U3 : component inference_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => i_op_assign_fu_747_p18,
        din1 => input_r_dout,
        dout => mul_ln28_fu_788_p2);

    flow_control_loop_pipe_sequential_init_U : component inference_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_154 <= ap_const_lv16_0;
                elsif (((icmp_ln22_fu_512_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_154 <= select_ln22_1_fu_574_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_158 <= ap_const_lv26_0;
                elsif (((icmp_ln22_fu_512_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten12_fu_158 <= add_ln22_fu_518_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_150 <= ap_const_lv13_0;
                elsif (((icmp_ln22_fu_512_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_150 <= select_ln23_3_fu_699_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_142 <= ap_const_lv8_0;
                elsif (((icmp_ln22_fu_512_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_142 <= add_ln25_fu_652_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_146 <= ap_const_lv5_0;
                elsif (((icmp_ln22_fu_512_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_146 <= select_ln23_2_fu_602_p3;
                end if;
            end if; 
        end if;
    end process;

    sum_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sum_fu_138 <= ap_const_lv32_0;
                elsif (((icmp_ln27_reg_957 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    sum_fu_138 <= sum_2_fu_794_p2;
                elsif (((icmp_ln27_reg_957 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    sum_fu_138 <= select_ln23_1_fu_735_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_512_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln27_reg_957 <= icmp_ln27_fu_646_p2;
                ifzero_reg_1041 <= ifzero_fu_658_p2;
                or_ln23_reg_947 <= or_ln23_fu_588_p2;
                select_ln23_2_reg_952 <= select_ln23_2_fu_602_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ifzero_reg_1041_pp0_iter2_reg <= ifzero_reg_1041;
                trunc_ln33_1_reg_1045_pp0_iter2_reg <= trunc_ln33_1_reg_1045;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_512_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ifzero_fu_658_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln33_1_reg_1045 <= trunc_ln33_1_fu_686_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln22_1_fu_568_p2 <= std_logic_vector(unsigned(i_fu_154) + unsigned(ap_const_lv16_2));
    add_ln22_fu_518_p2 <= std_logic_vector(unsigned(indvar_flatten12_fu_158) + unsigned(ap_const_lv26_1));
    add_ln23_1_fu_693_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_150) + unsigned(ap_const_lv13_1));
    add_ln23_fu_582_p2 <= std_logic_vector(unsigned(select_ln22_fu_542_p3) + unsigned(ap_const_lv5_1));
    add_ln25_fu_652_p2 <= std_logic_vector(unsigned(select_ln23_fu_594_p3) + unsigned(ap_const_lv8_1));
    add_ln27_fu_640_p2 <= std_logic_vector(unsigned(zext_ln27_fu_636_p1) + unsigned(select_ln22_1_fu_574_p3));
    and_ln22_fu_562_p2 <= (xor_ln22_fu_550_p2 and icmp_ln25_fu_556_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, input_r_empty_n, icmp_ln27_reg_957, conv_output_full_n, ifzero_reg_1041_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ifzero_reg_1041_pp0_iter2_reg = ap_const_lv1_1) and (conv_output_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((icmp_ln27_reg_957 = ap_const_lv1_1) and (input_r_empty_n = ap_const_logic_0)) or ((icmp_ln27_reg_957 = ap_const_lv1_0) and (input_r_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, input_r_empty_n, icmp_ln27_reg_957, conv_output_full_n, ifzero_reg_1041_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ifzero_reg_1041_pp0_iter2_reg = ap_const_lv1_1) and (conv_output_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((icmp_ln27_reg_957 = ap_const_lv1_1) and (input_r_empty_n = ap_const_logic_0)) or ((icmp_ln27_reg_957 = ap_const_lv1_0) and (input_r_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, input_r_empty_n, icmp_ln27_reg_957, conv_output_full_n, ifzero_reg_1041_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ifzero_reg_1041_pp0_iter2_reg = ap_const_lv1_1) and (conv_output_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((icmp_ln27_reg_957 = ap_const_lv1_1) and (input_r_empty_n = ap_const_logic_0)) or ((icmp_ln27_reg_957 = ap_const_lv1_0) and (input_r_empty_n = ap_const_logic_0)))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(input_r_empty_n, icmp_ln27_reg_957)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((icmp_ln27_reg_957 = ap_const_lv1_1) and (input_r_empty_n = ap_const_logic_0)) or ((icmp_ln27_reg_957 = ap_const_lv1_0) and (input_r_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(conv_output_full_n, ifzero_reg_1041_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((ifzero_reg_1041_pp0_iter2_reg = ap_const_lv1_1) and (conv_output_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln22_fu_512_p2)
    begin
        if (((icmp_ln22_fu_512_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    conv_output_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, conv_output_full_n, ifzero_reg_1041_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ifzero_reg_1041_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            conv_output_blk_n <= conv_output_full_n;
        else 
            conv_output_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv_output_din <= std_logic_vector(unsigned(trunc_ln33_1_reg_1045_pp0_iter2_reg) + unsigned(trunc_ln33_fu_808_p1));

    conv_output_write_assign_proc : process(ap_enable_reg_pp0_iter3, ifzero_reg_1041_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ifzero_reg_1041_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            conv_output_write <= ap_const_logic_1;
        else 
            conv_output_write <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_10_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_10_ce0 <= ap_const_logic_1;
        else 
            conv_weights_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_11_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_11_ce0 <= ap_const_logic_1;
        else 
            conv_weights_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_12_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_12_ce0 <= ap_const_logic_1;
        else 
            conv_weights_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_13_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_13_ce0 <= ap_const_logic_1;
        else 
            conv_weights_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_14_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_14_ce0 <= ap_const_logic_1;
        else 
            conv_weights_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_15_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_15_ce0 <= ap_const_logic_1;
        else 
            conv_weights_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_6_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_6_ce0 <= ap_const_logic_1;
        else 
            conv_weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_7_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_7_ce0 <= ap_const_logic_1;
        else 
            conv_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_8_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_8_ce0 <= ap_const_logic_1;
        else 
            conv_weights_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_9_address0 <= j_cast_fu_610_p1(7 - 1 downto 0);

    conv_weights_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_weights_9_ce0 <= ap_const_logic_1;
        else 
            conv_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln22_fu_512_p2 <= "1" when (indvar_flatten12_fu_158 = ap_const_lv26_222E000) else "0";
    icmp_ln23_fu_536_p2 <= "1" when (indvar_flatten_fu_150 = ap_const_lv13_800) else "0";
    icmp_ln25_fu_556_p2 <= "1" when (j_fu_142 = ap_const_lv8_80) else "0";
    icmp_ln27_fu_646_p2 <= "1" when (unsigned(add_ln27_fu_640_p2) < unsigned(ap_const_lv16_88B8)) else "0";
    ifzero_fu_658_p2 <= "1" when (add_ln25_fu_652_p2 = ap_const_lv8_80) else "0";

    input_r_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, input_r_empty_n, icmp_ln27_reg_957, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln27_reg_957 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln27_reg_957 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            input_r_blk_n <= input_r_empty_n;
        else 
            input_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_r_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln27_reg_957, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_957 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_957 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            input_r_read <= ap_const_logic_1;
        else 
            input_r_read <= ap_const_logic_0;
        end if; 
    end process;

    j_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_594_p3),64));
    or_ln23_fu_588_p2 <= (icmp_ln23_fu_536_p2 or and_ln22_fu_562_p2);
    select_ln22_1_fu_574_p3 <= 
        add_ln22_1_fu_568_p2 when (icmp_ln23_fu_536_p2(0) = '1') else 
        i_fu_154;
    select_ln22_fu_542_p3 <= 
        ap_const_lv5_0 when (icmp_ln23_fu_536_p2(0) = '1') else 
        k_fu_146;
    select_ln23_1_fu_735_p3 <= 
        ap_const_lv32_0 when (or_ln23_reg_947(0) = '1') else 
        sum_fu_138;
    select_ln23_2_fu_602_p3 <= 
        add_ln23_fu_582_p2 when (and_ln22_fu_562_p2(0) = '1') else 
        select_ln22_fu_542_p3;
    select_ln23_3_fu_699_p3 <= 
        ap_const_lv13_1 when (icmp_ln23_fu_536_p2(0) = '1') else 
        add_ln23_1_fu_693_p2;
    select_ln23_fu_594_p3 <= 
        ap_const_lv8_0 when (or_ln23_fu_588_p2(0) = '1') else 
        j_fu_142;
    shl_ln26_fu_630_p2 <= std_logic_vector(shift_left(unsigned(select_ln23_fu_594_p3),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    sum_2_fu_794_p2 <= std_logic_vector(unsigned(mul_ln28_fu_788_p2) + unsigned(select_ln23_1_fu_735_p3));
    tmp_fu_664_p17 <= 
        add_ln23_fu_582_p2 when (and_ln22_fu_562_p2(0) = '1') else 
        select_ln22_fu_542_p3;
    trunc_ln33_1_fu_686_p1 <= tmp_fu_664_p18(16 - 1 downto 0);
    trunc_ln33_fu_808_p1 <= sum_fu_138(16 - 1 downto 0);
    xor_ln22_fu_550_p2 <= (icmp_ln23_fu_536_p2 xor ap_const_lv1_1);
    zext_ln27_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln26_fu_630_p2),16));
end behav;
